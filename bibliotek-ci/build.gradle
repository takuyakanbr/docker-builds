/*
 * Gradle Configuration File
 *
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id "com.github.kt3k.coveralls" version "2.8.2"
    id "com.github.johnrengelman.shadow" version '2.0.2'
    id 'org.asciidoctor.convert' version '1.5.6'
    id 'application'
}

// Specifies the entry point of the application
mainClassName = 'seedu.address.MainApp'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

checkstyle {
    toolVersion = '8.1'
}

jacoco {
    toolVersion = '0.8.0'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

dependencies {
    String testFxVersion = '4.0.13-alpha'

    compile group: 'org.asynchttpclient', name: 'async-http-client', version: '2.4.3'
    compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.14'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.4'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.4'
    compile group: 'com.google.guava', name: 'guava', version: '23.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.16.0'
    testCompile group: 'org.testfx', name: 'testfx-core', version: testFxVersion
    testCompile group: 'org.testfx', name: 'testfx-junit', version: testFxVersion
    testCompile group: 'org.testfx', name: 'openjfx-monocle', version: '8u76-b04'
}

shadowJar {
    archiveName = "bibliotek.jar"

    destinationDir = file("${buildDir}/jar/")
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

task coverage(type: JacocoReport) {
    sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(allprojects.sourceSets.main.output)
    executionData = files(allprojects.jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/coverage/coverage.xml"
}

tasks.coveralls {
    dependsOn coverage
    onlyIf { System.env.'CI' }
}

task(guiTests)
task(nonGuiTests)

// Run `test` task if `guiTests` or `nonGuiTests` is specified
guiTests.dependsOn test
nonGuiTests.dependsOn test

task(allTests)

// `allTests` implies both `guiTests` and `nonGuiTests`
allTests.dependsOn guiTests
allTests.dependsOn nonGuiTests

test {
    test.maxParallelForks = Math.min(System.env.'CI' ? 2 : 4, Runtime.runtime.availableProcessors())
    minHeapSize = "512m"
    maxHeapSize = "1200m"
    jvmArgs '-Xmx1200m'

    systemProperty 'testfx.setup.timeout', '60000'

    /*
     * Prints the currently running test's name in the CI's build log,
     * so that we can check if tests are being silently skipped or
     * stalling the build.
     */
    if (System.env.'CI') {
        beforeTest { descriptor ->
            logger.lifecycle('Running test: ' + descriptor)
        }
    }

    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }

    doFirst {
        boolean runGuiTests = gradle.taskGraph.hasTask(guiTests)
        boolean runNonGuiTests = gradle.taskGraph.hasTask(nonGuiTests)

        if (!runGuiTests && !runNonGuiTests) {
            runGuiTests = true;
            runNonGuiTests = true;
        }

        if (runNonGuiTests) {
            test.include 'seedu/address/**'
        }

        if (runGuiTests) {
            test.include 'systemtests/**'
            test.include 'seedu/address/ui/**'
        }

        if (!runGuiTests) {
            test.exclude 'seedu/address/ui/**'
        }
    }
}

task headless {
    doLast {
        println "Setting headless mode properties."
        test {
            systemProperty 'java.awt.robot', 'true'
            systemProperty 'testfx.robot', 'glass'
            systemProperty 'testfx.headless', 'true'
            systemProperty 'prism.order', 'sw'
            systemProperty 'prism.text', 't2k'
        }
    }
}

// Makes sure that headless properties are set before running tests
test.mustRunAfter headless

asciidoctor {
    backends 'html5'
    sourceDir 'docs'
    outputDir "${buildDir}/docs"

    attributes linkcss: true,
            stylesheet: 'gh-pages.css',
            'source-highlighter': 'coderay',
            icons: 'font',
            experimental: true,
            sectAnchors: true,
            idprefix: '',  // for compatibility with GitHub preview
            idseparator: '-'
}

/*
 * Copies stylesheets into the directory containing generated HTML files as
 * Asciidoctor does not copy linked CSS files to the output directory when rendering.
 * This is needed for linked stylesheets and embedded stylesheets which import other files.
 */
task copyStylesheets(type: Copy) {
    from "${asciidoctor.sourceDir}/stylesheets"
    into "${asciidoctor.outputDir}/html5/stylesheets"
}
asciidoctor.dependsOn copyStylesheets

task deployOfflineDocs(type: Copy) {
    into('src/main/resources/docs')

    from ("${asciidoctor.outputDir}/html5") {
        include 'stylesheets/*'
        include 'images/*'
        include 'UserGuide.html'
    }
}

deployOfflineDocs.dependsOn asciidoctor
processResources.dependsOn deployOfflineDocs

task download {
    description "Pre-downloads most dependencies"
    doLast {
        configurations.getAsMap().each { name, config ->
            println "Retrieving dependencies for $name"
            try {
                config.files
            } catch (e) {
                // skip
            }
        }
    }
}

defaultTasks 'clean', 'headless', 'allTests', 'coverage', 'asciidoctor'
